{
  "Given Statement": {
    "prefix": "given",
    "body": [
      "const given = inspect`$0`",
      "$0"
    ]
  },
  "Should Statement": {
    "prefix": "should",
    "body": [
      "const should = inspect`$0`",
      "$0"
    ]
  },
  "Re-Export Object": {
    "prefix": "rexport",
    "body": [
      "export { ${1:$TM_SELECTED_TEXT} } from \"./$1\"",
      "$0"
    ],
    "description": "Log output to console"
  },
  "New Module": {
    "prefix": "new module",
    "description": "scaffold a new *.js module file",
    "body": [
      "import { sign } from \"@mwm/sign\"",
      "",
      "export const signatures = [\"${1:${TM_FILENAME_BASE}} :: a => a\"]",
      "",
      "export const implementation = argument => argument",
      "",
      "export const $1 = sign(signatures, implementation)",
      "",
    ]
  },
  "New Typing": {
    "prefix": "new dts",
    "description": "scaffold a new *.d.ts file",
    "body": [
      "/**",
      " * ```",
      " * ${1:${TM_FILENAME_BASE/(\\.d)//}}$2",
      " * ```",
      " * -----------------------------------------------------------------------------",
      " * ",
      " * $3",
      " * ",
      " */",
      "export declare function $1(${4:arg}: ${5:any}): ${6:any}$0"
    ]
  },
  "New Test": {
    "prefix": "new test",
    "description": "scaffold a new test script",
    "body": [
      "import { describe } from \"@mwm/describe\"",
      "import { ${1:${TM_FILENAME_BASE/(\\.test|\\.spec)//}}, implementation, signatures } from \"./$1\"",
      "",
      "describe(",
      "  {",
      "    path: \"source/$1\",",
      "    public: [$1],",
      "    private: [implementation, signatures],",
      "  },",
      "  async ({ assert, inspect }) => {",
      "    $0${TM_SELECTED_TEXT:assert.fail(\"No Functionality Tests!\")}",
      "  }",
      ")",
      "",
    ]
  },
  "Plan Test": {
    "prefix": "plan",
    "description": "create a test plan",
    "body": [
      "{",
      "  const actual = $1",
      "  const expected = $2",
      "  const given = inspect`$3`",
      "  const should = inspect`$4`",
      "  assert({ given, should, actual, expected })",
      "}"
    ]
  }
}
